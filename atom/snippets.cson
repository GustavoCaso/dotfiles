# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.ruby':
  'Debugging':
    'prefix': 'debug'
    'body': 'require \'pry\'; binding.pry'

  'Init Spec file':
    'prefix': 'rspec'
    'body': """
      require '$1_helper'

      describe $2 do

      end
    """

  'Class definition':
    'prefix': 'class'
    'body':"""
      class $1

        def initialize($2)
          $3
        end

      end
    """
  'require file':
    'prefix': 'requ'
    'body': 'require \'$1\''

'.source.elixir':
  'Handle Call':
    'prefix': 'h_call'
    'body': """
      def handle_call($1, _from, state) do
        $2
        {:reply, }
      end
    """

  'Handle Cast':
    'prefix': 'h_cast'
    'body': """
      def handle_cast($1, state) do
        $2
        {:noreply, }
      end
    """

  'Handle Info':
    'prefix': 'h_info'
    'body': """
      def handle_info(msg, state) do
        $1
        {:noreply, }
      end
    """
